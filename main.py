from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from StatesGroupClasses import HeroCreate
from StatesGroupClasses import Fight
from StatesGroupClasses import HeroInfo
from StatesGroupClasses import HeroRemove
from aiogram.types import ReplyKeyboardRemove
import random as rand
import time

from Enemy import Enemy
from Person import Person

import messages as mess
import dataBase as db
import markups
import battle as batt

bot = Bot(token = '–∑–¥–µ—Å—å –±—ã–ª —Ç–æ–∫–µ–Ω')

dp = Dispatcher(bot, storage=MemoryStorage())


async def on_startup(_):
    print("EBoBot is activated")


@dp.message_handler(commands=['start', '–í—ã—Ö–æ–¥ –≤ –ú–µ–Ω—é'])
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, f"{mess.startMessage(message.from_user.first_name)}", reply_markup=markups.start_menu)
    

@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å –ì–µ—Ä–æ—è")
async def createHero(message: types.Message, state: FSMContext):
    if len(db.getFileNames(message.from_user.id)) >= 3:
        await message.reply("–°—Ç–æ–ø ‚õî\n–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å 3 –ì–µ—Ä–æ—è:\n - –†–∞–∑–≤–∏–≤–∞–π –∏—Ö!\n - –ò–ª–∏ —É–¥–∞–ª–∏ –∫–æ–≥–æ-—Ç–æ –∏–∑ –Ω–∏—Ö –∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤–æ–≥–æ –ì–µ—Ä–æ—è.", reply_markup=markups.start_menu)
    else:
        await bot.send_message(message.from_user.id, f"–û–∫, {message.from_user.first_name}!\n–°–µ–π—á–∞—Å –º—ã —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ–±–µ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è! üí™", reply_markup=markups.one_btn_menu)
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è ‚úè")
        await state.set_state(HeroCreate.gettingName)

@dp.message_handler(state=HeroCreate.gettingName)
async def setHeroName(message: types.Message, state: FSMContext):
    if message.text == markups.exit_command:
        await bot.send_message(message.from_user.id, f"–ú—ã –≤ –ú–µ–Ω—é", reply_markup=markups.start_menu)
        await state.reset_data()
        await state.finish()
    else:
        await state.update_data(hero_name=message.text)
        user_data = await state.get_data()
        await bot.send_message(message.from_user.id, f"–•–æ—Ä–æ—à–æ!\n–í—ã–±–µ—Ä–∏ –ü—É—Ç—å –í–æ–∏–Ω–∞ –¥–ª—è –≥–µ—Ä–æ—è –ø–æ –∏–º–µ–Ω–∏ {user_data['hero_name']} ‚öî", reply_markup=markups.ways_menu)
        await state.set_state(HeroCreate.gettingWay)    

@dp.message_handler(state=HeroCreate.gettingWay, text=markups.wayButtons)
async def setHeroWay(message: types.Message, state: FSMContext):
    if message.text == markups.exit_command:
        await bot.send_message(message.from_user.id, f"–ú—ã –≤ –ú–µ–Ω—é", reply_markup=markups.start_menu)
        await state.reset_data()
        await state.finish()
    else:
        user_data = await state.get_data()
        fighter = Person(message.from_user.id)
        fighter.person_list[1] = user_data['hero_name']
        fighter.person_list[2] = message.text
        match(message.text):
            case "–ù–∏–Ω–¥–∑—è":
                for i in range(3, len(fighter._ninja_pattern)):
                    fighter.person_list[i] = fighter._ninja_pattern[i]
            case "–°–∞–º—É—Ä–∞–π":
                for i in range(3, len(fighter._samurai_pattern)):
                    fighter.person_list[i] = fighter._samurai_pattern[i]
            case "–ö–∞–º–∏–∫–∞–¥–∑–µ":
                for i in range(3, len(fighter._kamikaze_pattern)):
                    fighter.person_list[i] = fighter._kamikaze_pattern[i]
            case "–°—ë–≥—É–Ω":
                for i in range(3, len(fighter._shogun_pattern)):
                    fighter.person_list[i] = fighter._shogun_pattern[i]
            case "–°–∫–∞–ª–∞":
                for i in range(3, len(fighter._rock_pattern)):
                    fighter.person_list[i] = fighter._rock_pattern[i] 
        db.writePerson(fighter.getPersonList())
        await bot.send_message(message.from_user.id, f"–ì–µ—Ä–æ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üí•\n\n{mess.showPersonInfo(fighter.getPersonList())}", reply_markup=markups.start_menu)
        # await state.reset_data()
        await state.finish()

@dp.message_handler(state=HeroCreate.gettingWay)
async def setWrongHeroWay(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, f"–°–ª—É—à–∞–π, {message.from_user.first_name}... \n–¢—ã –¥–µ–ª–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚õî\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –ë–æ–µ–≤–æ–π –ü—É—Ç—å —Ç–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è ‚¨á", reply_markup=markups.ways_menu)




@dp.message_handler(text="–ë–æ–π —Å –°–æ–ø–µ—Ä–Ω–∏–∫–æ–º")
async def sstart(message: types.Message, state: FSMContext):
    if len(db.getFileNames(message.from_user.id)) < 1:
        await bot.send_message(message.from_user.id, f"{message.from_user.first_name}, —É —Ç–µ–±—è –Ω–µ—Ç –ì–µ—Ä–æ–µ–≤\n–°–æ–∑–¥–∞–π –≥–µ—Ä–æ—è –≤ –ú–µ–Ω—é", reply_markup=markups.start_menu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –∫–æ–≥–æ –∏–∑ –≥–µ—Ä–æ–µ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–æ–π ‚¨á",reply_markup=markups.buttonsFromFile(db.getFileNames(message.from_user.id)))
        await state.set_state(Fight.chooseHero)
        await state.update_data(id=message.from_user.id)
@dp.message_handler(state = Fight.chooseHero)
async def chooseName(message: types.Message, state: FSMContext):
    if message.text in db.getFileNames(message.from_user.id):
        fighter = Person(message.from_user.id)
        fighter.person_list = db.loadFromFileName(message.from_user.id, message.text)
        await state.update_data(person_list=db.loadFromFileName(message.from_user.id, message.text))
        user_data = await state.get_data()
        enemy = Enemy(user_data['person_list'][3])
        await state.update_data(enemy_list = enemy.enemy_list)
        user_data = await state.get_data()
        await bot.send_message(message.from_user.id, f'''–°—Ö–≤–∞—Ç–∫–∞ –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å –∑—Ä–µ–ª–∏—â–Ω–æ–π!\n
{user_data['person_list'][2]} {user_data['person_list'][1]} ({user_data['person_list'][3]} —É—Ä–æ–≤–µ–Ω—å)
        üÜö
{user_data['enemy_list'][2]} {user_data['enemy_list'][1]} ({user_data['enemy_list'][3]} —É—Ä–æ–≤–µ–Ω—å)\n
–¢–≤–æ–π —Ö–æ–¥, {message.from_user.first_name}. –í –±–æ–π!''', reply_markup=markups.hits_menu)
        await state.set_state(Fight.chooseHit)
    elif message.text == markups.exit_command:
        await bot.send_message(message.from_user.id, f"–ú—ã –≤ –ú–µ–Ω—é", reply_markup=markups.start_menu)
        await state.reset_data()
        await state.finish()
    else:
        await message.reply(f"–°–ª—É—à–∞–π, {message.from_user.first_name}... \n–¢—ã –¥–µ–ª–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚õî\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –ì–µ—Ä–æ—è –¥–ª—è –±–∏—Ç–≤—ã ‚¨á",reply_markup=markups.buttonsFromFile(db.getFileNames(message.from_user.id)))
@dp.message_handler(state = Fight.chooseHit)
async def battle(message: types.Message, state: FSMContext):
    if message.text in markups.hitButtons:
        fighter = Person(message.from_user.id)
        user_data = await state.get_data()
        
        hit_list = batt.personHit(user_data['person_list'], user_data['enemy_list'], message.text)
        user_data['enemy_list'][5] = round(user_data['enemy_list'][5]- hit_list[3], 2)
        await state.update_data(enemy_list =  user_data['enemy_list'])
        user_data = await state.get_data()
    
        await bot.send_message(message.from_user.id, f"üëä {mess.hitString(hit_list)}", reply_markup=markups.waiting_menu)
        
        if user_data['enemy_list'][5] <= 0:
            user_data['person_list'][4] += 10 // user_data['person_list'][3]
            fighter.updateLevelWin(user_data['person_list'])
            db.writePerson(user_data['person_list'])
            db.writeEnemyStats(user_data['enemy_list'])
            photoWin = open("data\materials\win.gif", 'rb')
            await bot.send_message(message.from_user.id, mess.winMessage(user_data['person_list'], user_data['enemy_list']), reply_markup=markups.fight_end_menu)
            await bot.send_animation(message.chat.id, photoWin, reply_markup=markups.start_menu)
            await state.finish()
            return

        hit_list = batt.personHit(user_data['enemy_list'], user_data['person_list'], rand.choice(markups.hitButtons))
        user_data['person_list'][5] = round(user_data['person_list'][5] - hit_list[3])
        await state.update_data(person_list =  user_data['person_list'])
        user_data = await state.get_data()
        time.sleep(1)
        await bot.send_message(message.from_user.id, f"üëπ {mess.hitString(hit_list)}", reply_markup=markups.hits_menu)
        

        if user_data['person_list'][5] <= 0:
            user_data['person_list'][4] += 5 // user_data['person_list'][3]
            fighter.updateLevelLose(user_data['person_list'])
            db.writePerson(user_data['person_list'])
            db.writeEnemyStats(user_data['enemy_list'])
            photoLose = open("data\materials\lose.gif", 'rb')
            await bot.send_message(message.from_user.id, f"–¢–´ –ü–†–û–ò–ì–†–ê–õ –í –≠–¢–û–ô –°–•–í–ê–¢–ö–ï! üëéüëéüëé\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø–æ–±–µ–∂–¥–∞—Ç—å!", reply_markup=markups.fight_end_menu)
            await bot.send_animation(message.chat.id, photoLose, reply_markup=markups.start_menu)
            await state.finish()
            return
    elif message.text == markups.exit_command:
        await bot.send_message(message.from_user.id, f"–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –±—ã–ª–∞ –≤–µ—Å–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ —É–π—Ç–∏! \n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø–æ–±–µ–∂–¥–∞—Ç—å!", reply_markup=markups.start_menu)
        await state.reset_data()
        await state.finish()
    elif message.text == markups.waiting:
        await bot.send_message(message.from_user.id, f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–ø–µ—Ä–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏—Ç —Ö–æ–¥, —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä")   
    elif message.text == markups.fight_ending:
        await bot.send_message(message.from_user.id, f"–î–æ–∂–¥–∏—Å—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏, –∏ —Ç–µ–±–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")   
    else:
        await message.reply(f"–°–ª—É—à–∞–π, {message.from_user.first_name}... \n–¢—ã –¥–µ–ª–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚õî\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –ë–æ–µ–≤–æ–π –ü—Ä–∏—ë–º ‚¨á", reply_markup=markups.hits_menu)




@dp.message_handler(text="–ò–Ω—Ñ–∞ –æ –ì–µ—Ä–æ–µ")
async def infStart(message: types.Message, state: FSMContext):
    if len(db.getFileNames(message.from_user.id)) < 1:
        await bot.send_message(message.from_user.id, f"{message.from_user.first_name}, —É —Ç–µ–±—è –Ω–µ—Ç –ì–µ—Ä–æ–µ–≤\n–°–æ–∑–¥–∞–π –≥–µ—Ä–æ—è –≤ –ú–µ–Ω—é", reply_markup=markups.start_menu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, "–ò–Ω—Ñ—É –æ –∫–∞–∫–æ–º –≥–µ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å? ‚¨á",reply_markup=markups.buttonsFromFile(db.getFileNames(message.from_user.id)))
        await state.set_state(HeroInfo.chooseHero)
@dp.message_handler(state = HeroInfo.chooseHero)
async def chooseName(message: types.Message, state: FSMContext):
    if message.text in db.getFileNames(message.from_user.id):
        person_list = db.loadFromFileName(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, f"–í–æ—Ç –∏–Ω—Ñ–∞ –æ–± —ç—Ç–æ–º –≥–µ—Ä–æ–µ üí•\n\n{mess.showPersonInfo(person_list)}", reply_markup=markups.start_menu)
        await state.finish()
    elif message.text == markups.exit_command:
        await bot.send_message(message.from_user.id, f"–ú—ã –≤ –ú–µ–Ω—é", reply_markup=markups.start_menu)
        await state.reset_data()
        await state.finish()
    else:
        await message.reply(f"–°–ª—É—à–∞–π, {message.from_user.first_name}... \n–¢—ã –¥–µ–ª–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚õî\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –ì–µ—Ä–æ—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ ‚¨á",reply_markup=markups.buttonsFromFile(db.getFileNames(message.from_user.id)))





@dp.message_handler(text="–£–¥–∞–ª–∏—Ç—å –ì–µ—Ä–æ—è")
async def delStart(message: types.Message, state: FSMContext):
    if len(db.getFileNames(message.from_user.id)) < 1:
        await bot.send_message(message.from_user.id, f"{message.from_user.first_name}, —É —Ç–µ–±—è –Ω–µ—Ç –ì–µ—Ä–æ–µ–≤\n–°–æ–∑–¥–∞–π –≥–µ—Ä–æ—è –≤ –ú–µ–Ω—é", reply_markup=markups.start_menu)
        await state.finish()
    else:
        await message.reply("–ö–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≥–Ω–∞—Ç—å? ‚¨á",reply_markup=markups.buttonsFromFile(db.getFileNames(message.from_user.id)))
        await state.set_state(HeroRemove.chooseHero)
@dp.message_handler(state = HeroRemove.chooseHero)
async def choName(message: types.Message, state: FSMContext):
    if message.text in db.getFileNames(message.from_user.id):
        await bot.send_message(message.from_user.id, f"{message.from_user.first_name}, —Ç–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ –æ–±–¥—É–º–∞–Ω–Ω–æ–µ –∏ —Ç–≤—ë—Ä–¥–æ–µ?", reply_markup=markups.yesno_menu)
        await state.update_data(rem_name = message.text)
        await state.set_state(HeroRemove.removeHero)
    elif message.text == markups.exit_command:
        await bot.send_message(message.from_user.id, f"–ò –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –Ω–∏–∫–æ–≥–æ –≤—ã–≥–æ–Ω—è—Ç—å :)", reply_markup=markups.start_menu)
        await state.reset_data()
        await state.finish()
    else:
        await message.reply(f"–ù–∞–≤–µ—Ä–Ω–æ–µ –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∏–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å ;)", reply_markup=markups.start_menu)
        await state.reset_data()
        await state.finish()
@dp.message_handler(state = HeroRemove.removeHero)
async def choName(message: types.Message, state: FSMContext):
    if message.text == '–î–ê':
        user_data = await state.get_data()
        db.removeFromFileName(message.from_user.id, user_data['rem_name'])
        await bot.send_message(message.from_user.id, f"–≠—Ç–æ—Ç –ì–µ—Ä–æ–π –±–æ–ª—å—à–µ –Ω–µ —Å –Ω–∞–º–∏", reply_markup=markups.start_menu)
        await state.reset_data()
        await state.finish()    
    else:
        await message.reply(f"–õ—é–±–æ–π –æ—Ç–≤–µ—Ç, –∫—Ä–æ–º–µ '–î–ê' —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –≤ –ø–æ–ª—å–∑—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ì–µ—Ä–æ—è", reply_markup=markups.start_menu)
        await state.reset_data()
        await state.finish()    


@dp.message_handler(text="–ò–Ω—Ñ–∞ –æ–± –∏–≥—Ä–µ")
async def infGame(message: types.Message):
    await bot.send_message(message.from_user.id, f"{mess.gameInfo(message.from_user.first_name)}", reply_markup=markups.start_menu)



@dp.message_handler()
async def other(msg: types.Message):
    await bot.send_message(msg.from_user.id, f"–í—ã–±–∏—Ä–∞–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é, {msg.from_user.first_name} ‚¨á", reply_markup=markups.start_menu)


executor.start_polling(dp, skip_updates=True, on_startup=on_startup)